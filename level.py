import time

def matrix(A):
    for i, a in enumerate(A):
        print(*a), 
        if i % 5 == 6: 
            print("\n")

def format(A):
    print()
    matrix(A)
    print()
    print()
    print()
    print()
    print()

def formatF(A):
    print()
    for row in A:
        print(*row)
        time.sleep(0.35)
    print()

Q = "\033[1;33;40m?\033[0;37;40m"
Do = "\033[0;33;40m$\033[0;37;40m"

O = "\033[1;30mO\033[0;37;40m"
G = "\033[0;32m#\033[0;37;40m"
B = "\033[0;34mB\033[0;37;40m"

P = "\033[1;32mP\033[0;37;40m"
T = "\033[1;32mT\033[0;37;40m"
uP = "\033[1;32mꓒ\033[0;37;40m"

S = "\033[0;37mɅ\033[0;37;40m"
Lv = "\033[1;31m≈\033[0;37;40m"

sD = "\033[1;30mᗜ\033[0;37;40m"

level = [#                                10                                      20                                      30                                      40                                      50
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ", O ," "," "," "," ", Q , Q , Q ," "," "," "," "," "," "," "," "," "," "," "],
    [" "," ", O , Q , O ," "," "," "," "," "," "," "," "," "," ", G , G , G ," "," ", Q , Q , Q ," "," "," "," "," "," "," "," "," "," "," ", O , O ," "," "," "," "," "," "," "," "," ", P , T , T , P ," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," ", G , G , G , G , G , G , G , G , G , G ," "," "," "," "," "," "," "," "," "," "," "," "," ", O , O , O ," "," ", G , G ," "," "," "," "," "," ", P , uP," "," "," "," "," "," "],
    [ G , G , G , G , G , G ," ", sD," ", G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G ],
    [ G , G , G , G , G , G ," "," "," ", G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G , G ],
]
home = level

underground = [
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","Σ|"," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ", O , O , O ," "," "," "," "," ", Q , Q ," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," |"," "," "," "," "," "],
    [" ", P , P , P , P ," "," "," "," "," "," "," "," "," "," ", O , O , O , O , O , O , O , O , O ," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," |"," "," "," "," "," "],
    [" "," ", P , uP," "," "," ", S ," "," "," "," ", S ," "," ", O , O , O , O , O , O , O , O , O ," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," |"," "," "," "," "," "],
    [ O , O , O , O , O , O , O , O ," ", S ," ", O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , Lv, sD, sD, Lv, sD, Lv, sD, Lv, O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O ],
    [ O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , Lv, Lv, Lv, Lv, Lv, Lv, Lv, Lv, O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O , O ],
]

cave = [
    [ B , B ," "," "," ", B , B , B , B , B , B , B , B , B , B , B , B ],
    [ B , B ," "," "," "," "," "," "," "," "," "," "," "," "," ", B , B ],
    [ B , B ," "," "," ", Q , Q , Q , Q , Q ," "," "," "," "," ", B , B ],
    [ B , B ," "," "," "," "," "," "," "," ", Q , Q , Q , Q ," ", B , B ],
    [ B , B ," "," "," "," "," "," "," "," "," "," "," "," "," ", B , B ],
    [ B , B , B , B , B , B , B , B , B , B , B , B , B , B , B , B , B ],
    [ B , B , B , B , B , B , B , B , B , B , B , B , B , B , B , B , B ],
]